package de.tudarmstadt.kom.carsimulator.simulation;

import java.util.ArrayList;
import java.util.List;

import de.tudarmstadt.kom.carsimulator.speed.SpeedDataRecord;
import de.tudarmstadt.kom.carsimulator.util.GoogleAPIUtility;
import de.tudarmstadt.kom.carsimulator.xml.route.KoordinatesWaypoint;
import de.tudarmstadt.kom.carsimulator.xml.route.Route;

public class StandardSimulationEngine implements SimulationEngine, Runnable {
	private volatile long _startTimestamp;
	private Thread _simulationThread;
	private volatile boolean _paused = true;
	private volatile boolean _started = false;
	private List<SpeedDataRecord> _route;
	private static StandardSimulationEngine _onlyInstance = new StandardSimulationEngine();

	//Auxiliary structures
	private int activeElement = 0;
	private long activeElementTimestamp = 0;
	private List<KoordinatesWaypoint> decodePoints;

	private StandardSimulationEngine() {
		_simulationThread = new Thread(this);
		_simulationThread.start();
	}

	public static StandardSimulationEngine getInstance() {
		return _onlyInstance;
	}

	@Override
	public KoordinatesWaypoint getCurrentPosition() {
		int index = (int)Math.min((activeElementTimestamp - _startTimestamp) * decodePoints.size() / _route.get(activeElement).getDuration(), decodePoints.size() - 1);
//		Log.e("obd", "Getting decode points value: " + index);
		return decodePoints.get(index);
//		return new KoordinatesWaypoint(-87.9f, 43.1f);
	}

	@Override
	public int getCurrentSpeed() {
		return _route.get(activeElement).getSpeedLimit();
	}

	@Override
	public void startSimulation() {
		activeElement = 0;
		_startTimestamp = System.currentTimeMillis();
		activeElementTimestamp = _startTimestamp;
		decodePoints = decodePoints(_route.get(activeElement).getPoints());
		_started = true;
		_paused = false;
	}

	@Override
	public void pauseSimulation() {
		_paused = !_paused;
	}
	
	@Override
	public boolean isStarted() {
		return _started;
	}

	@Override
	public void endSimulation() {
		_startTimestamp = 0;
		_paused = true;
		_started = false;
	}

	@Override
	public boolean setRoute(Route pRoute) {
		endSimulation();
		_route = GoogleAPIUtility.getRoute(pRoute).getSpeedDataRecords();
<<<<<<< .mine
		if(_route.isEmpty()){
			return false;
		}
		startSimulation();
=======
		if (_route == null) {
			return false;
		}
		return true;
>>>>>>> .r5
		return true;
	}

	@Override
	public void run() {
		long sleepInterval = 500;
		while (true) {
			if (!_paused) {
				while (activeElementTimestamp - _startTimestamp >= _route.get(activeElement).getDuration()) {
					System.out.println("\t" + (activeElementTimestamp - _startTimestamp));
					_startTimestamp += _route.get(activeElement).getDuration();
					activeElement++;
					if (activeElement >= _route.size()) {
						activeElement -= _route.size();
						System.out.println("Start");
					}
					decodePoints = decodePoints(_route.get(activeElement).getPoints());
				}
			} else {
				_startTimestamp += sleepInterval;
			}
			activeElementTimestamp += sleepInterval;
			try {
				Thread.sleep(sleepInterval);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}

	@Override
	public boolean isPaused() {
		return _paused;
	}

	private List<KoordinatesWaypoint> decodePoints(String encoded_points){
		int index = 0;
		int lat = 0;
		int lng = 0;
		List <KoordinatesWaypoint> out = new ArrayList<KoordinatesWaypoint>();

		try {
			int shift;
			int result;
			while (index < encoded_points.length()) {
				shift = 0;
				result = 0;
				while (true) {
					int b = encoded_points.charAt(index++) - '?';
					result |= ((b & 31) << shift);
					shift += 5;
					if (b < 32)
						break;
				}
				lat += ((result & 1) != 0 ? ~(result >> 1) : result >> 1);

				shift = 0;
				result = 0;
				while (true) {
					int b = encoded_points.charAt(index++) - '?';
					result |= ((b & 31) << shift);
					shift += 5;
					if (b < 32)
						break;
				}
				lng += ((result & 1) != 0 ? ~(result >> 1) : result >> 1);
				/* Add the new Lat/Lng to the Array. */
				out.add(new KoordinatesWaypoint((lng / 100000f), (lat / 100000f)));
			}
			return out;
		}catch(Exception e) {
			e.printStackTrace();
		}
		return out;
	}

	@Override
	public int getActiveElement() {
		return activeElement;
	}

}
